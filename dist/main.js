(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(o){e(1,arguments);var n=t(o);return n.setHours(0,0,0,0),n}function n(t,n){e(2,arguments);var l=o(t),a=o(n);return l.getTime()===a.getTime()}function l(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function a(o,n){e(1,arguments);var a=n||{},d=a.locale,i=d&&d.options&&d.options.weekStartsOn,c=null==i?0:l(i),s=null==a.weekStartsOn?c:l(a.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var r=t(o),u=r.getDay(),m=(u<s?7:0)+u-s;return r.setDate(r.getDate()-m),r.setHours(0,0,0,0),r}function d(t,o,n){e(2,arguments);var l=a(t,n),d=a(o,n);return l.getTime()===d.getTime()}const i="my.projects",c="my.allTab";let s=JSON.parse(localStorage.getItem(i))||[],r=JSON.parse(localStorage.getItem(c))||{title:"all",todos:[]};function u(){localStorage.setItem(i,JSON.stringify(s))}let m={title:"today",todos:[]},v={title:"thisWeek",todos:[]};const f=document.querySelector("#projectsContainer");function p(){u(),function(){for(;f.firstChild;)f.removeChild(f.firstChild)}(),s.forEach((e=>{let t=document.createElement("button");t.classList.add("tab"),t.classList.add("project"),t.id=e.title;let o=document.createElement("div");o.classList.add("projectTitle"),o.textContent=e.title;let n=document.createElement("button");n.classList.add("deleteProjectBtn"),n.textContent="🗑",t.appendChild(o),t.appendChild(n),f.appendChild(t)}))}const y=document.querySelector(".todoContainer");function h(e,t){e.todos.push(t)}function L(e){localStorage.setItem(c,JSON.stringify(r)),u(),function(){for(;y.firstChild;)y.removeChild(y.firstChild)}(),function(e){e.todos.forEach((e=>{let t=document.createElement("li");t.classList.add("todo"),t.id=e.title;let o=document.createElement("input");o.type="checkbox",o.classList.add("checkbox");let n=document.createElement("div");n.classList.add("title"),n.textContent=e.title;let l=document.createElement("div");l.classList.add("desc"),l.textContent=e.desc;let a=document.createElement("div");a.classList.add("date"),a.textContent=e.date,1==e.complete&&(t.classList.add("checked"),o.checked=!0);let d=document.createElement("button");d.classList.add("editTodoBtn"),d.textContent="📝";let i=document.createElement("button");i.classList.add("deleteTodoBtn"),i.textContent="🗑",t.appendChild(o),t.appendChild(n),t.appendChild(l),t.appendChild(a),t.appendChild(d),t.appendChild(i),y.appendChild(t)}))}(e)}const S=document.querySelector("#all"),g=document.querySelector("#today"),E=document.querySelector("#thisWeek"),C=document.querySelector(".sidebar");let b=r;p(),L(b),g.addEventListener("click",(()=>{(function(){let t=r.todos.filter((t=>function(t){return e(1,arguments),n(t,Date.now())}(new Date(t.date))));m.todos=t})(),L(b)})),E.addEventListener("click",(()=>{(function(){let t=r.todos.filter((t=>function(t,o){return e(1,arguments),d(t,Date.now(),o)}(new Date(t.date))));v.todos=t})(),L(b)})),C.addEventListener("click",(e=>{let t=e.target,o=t.id,n=document.querySelectorAll(".tab");if("tab"===t.classList[0]){if(n.forEach((e=>e.classList.remove("current"))),t.classList.add("current"),"project"===t.classList[1]){let e=s.filter((e=>e.title===o))[0];b=e,newTodoBtn.classList.remove("hidden")}else"all"===o?(b=r,newTodoBtn.classList.remove("hidden")):"today"===o?(b=m,newTodoBtn.classList.add("hidden")):(b=v,newTodoBtn.classList.add("hidden"));L(b)}})),y.addEventListener("click",(e=>{let t=e.target.classList[0],o=e.target.parentElement.id,n=b.todos.filter((e=>e.title===o))[0];if("checkbox"===t&&(n.complete?n.complete=!1:n.complete=!0,L(b)),"editTodoBtn"===t){if("No date"===n.date)var l="";else l=new Date(n.date).toISOString().split("T")[0];T.editingTodo(n.title,n.desc,l)}if("deleteTodoBtn"===t){let e=n.origin,t=r.todos.findIndex((e=>e.title==o)),l=b.todos.findIndex((e=>e.title==o));if("all"===e)"today"!==b.title&&"thisWeek"!==b.title||b.todos.splice(l,1);else{let t=s.filter((t=>t.title===e))[0],n=t.todos.findIndex((e=>e.title==o));"today"===b.title||"thisWeek"===b.title?(b.todos.splice(l,1),t.todos.splice(n,1)):(b.title,t.todos.splice(n,1))}r.todos.splice(t,1),L(b)}})),f.addEventListener("click",(e=>{let t=e.target.classList[0],o=e.target.parentElement.id,n=s.findIndex((e=>e.title===o));if("deleteProjectBtn"===t){let e=document.querySelectorAll(".tab");s.splice(n,1),r.todos=r.todos.filter((e=>e.origin!==o)),b=r,e.forEach((e=>e.classList.remove("current"))),S.classList.add("current"),L(b),p()}}));const T=(()=>{const e=document.querySelector("#newTodoBtn"),t=document.querySelector("#todoModal"),o=document.querySelector("#overlay"),n=document.querySelector("#todoModalTitle"),l=document.querySelector("#todoModalCloseBtn"),a=document.querySelector("#todoName"),d=document.querySelector("#todoDetails"),i=document.querySelector("#todoDate"),c=document.querySelector("#submitTodoBtn");let s;function u(){null!=t&&(t.classList.add("active"),o.classList.add("active"))}function m(){null!=t&&(t.classList.remove("active"),o.classList.remove("active"),a.value="",d.value="",i.value="")}function v(e,t){return e.indexOf(t)>=0}return e.addEventListener("click",(()=>{n.textContent="New Todo",c.textContent="Add",u()})),l.addEventListener("click",(()=>{m()})),o.addEventListener("click",(()=>{m()})),c.addEventListener("click",(e=>{if(e.preventDefault(),""===i.value)var t="No date";else t=new Date(i.value.split("-")).toDateString();if(""===a.value)alert("Todo name can't be empty");else if("Edit Todo"===n.textContent)a.value!==s.title&&v(r.todos.map((e=>e.title)),a.value)?alert("Todo name must be unique"):(o=s,l=a.value,c=d.value,u=t,o.title=l,o.desc=c,o.date=u,L(b),a.value="",d.value="",i.value="",m());else if(v(r.todos.map((e=>e.title)),a.value))alert("Todo name must be unique");else{let e=((e,t,o,n,l)=>({title:e,desc:t,date:o,complete:!1,origin:l}))(a.value,d.value,t,0,b.title);"all"===b.title?h(b,e):(h(b,e),r.todos.push(e)),L(b),a.value="",d.value="",i.value="",m()}var o,l,c,u})),{openTodoModal:u,closeTodoModal:m,checkDuplicate:v,editingTodo:function(e,t,o){n.textContent="Edit Todo",c.textContent="Change",u(),a.value=e,d.value=t,i.value=o,s=b.todos.filter((t=>t.title===e))[0]}}})();(()=>{const e=document.querySelector("#newProjectBtn"),t=document.querySelector("#projectModal"),o=document.querySelector("#overlay"),n=document.querySelector("#projectModalCloseBtn"),l=document.querySelector("#projectName"),a=document.querySelector("#submitProjectBtn");function d(){null!=t&&(t.classList.remove("active"),o.classList.remove("active"),l.value="")}e.addEventListener("click",(()=>{null!=t&&(t.classList.add("active"),o.classList.add("active"))})),n.addEventListener("click",(()=>{d()})),o.addEventListener("click",(()=>{d()})),a.addEventListener("click",(e=>{e.preventDefault();let t=l.value;if(""===t)alert("Project name can't be empty");else if(o=s.map((e=>e.title)),n=t,o.indexOf(n)>=0)alert("Project name must be unique");else{a={title:l.value,todos:[]},s.push(a),p(),l.value="",d(),document.querySelector(`#${b.title}`).classList.add("current")}var o,n,a}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,